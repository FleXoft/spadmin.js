20181219:
	- meg kell vizsgálni, milyen módon tud a java-s program key leütésenként vizsgálni stdin-ről
		- https://stackoverflow.com/questions/9964995/java-how-do-you-detect-tab-key-press-within-a-non-gui-application
		- https://sourceforge.net/projects/javacurses/
		- jline3, lásd pom.xml
	- alap program kiépítés, git repo kezelés, alap class-ok
	- készen van egy kis prg, ami karakterenként olvassa be az stdin-ről a jelet, elvileg windows-on és linux-on is működik
		- mvn exec:java -Dexec.mainClass="test.rawconsoleinput.TestRCI"
	- Windows > Preferences > Java > Editor: uncheck Smart caret positioning in Java names
	- Windows > Preferences > General > Keys:
		- Command:"Next Editor" new binding > Ctrl-Tab

20190120:
	- nem általánoskodom, beírom Java Class-okba a lehetséges konfigokat a TSM-es parancsokból, csinálok gyors parsert
	- teszt:
		- mvn exec:java -Dexec.mainClass="test.rawconsoleinput.TestRCI"
		- mvn exec:java -Dexec.mainClass="text.textio.ContactInfo"
		- mvn exec:java -Dexec.mainClass="test.jline3.TestJLine3"
		- mvn exec:java -Dexec.mainClass="test.jline3.Test2"

20190130:
	- elkészítettem a query node parser class-okat
		- lehetőleg általános módon, hogy használni lehessen más definíciókban is

20190422:
	- query node cmd:
		- https://www.ibm.com/support/knowledgecenter/en/SSGSG7_7.1.0/com.ibm.itsm.srv.ref.doc/r_cmd_node_query.html
	- megalkottam a command-tree1.xml fájlt
		- ebben le vannak írva a "query node", "query actlog", "dir" parancsok szintaktikája
		- ebben elvileg minden megvan a TAB-os ellenőrzéshez és kiegészítéshez
	- megvan a command-tree1.xml beolvasása
	- elkezdtem megvalósítani a checkInput fgv-t, részben megvan
		- a seq elemek még nincsenek meg
		- ekkor folytatni kell az ellenőrzést egy adott karaktertől, nem elég az utolsó CmdTreeNode bemenő paraméternek

20190428:
	- a nem megfelelő adatstruktúra miatt nagyon bonyi a parse-olás és lépkedés a cmdTree-ben
	- átalakítom úgy a programot, hogy bármerre lehessen egy node-ról lépkedni, minden node-hoz tárolom:
		- parent
		- child
		- nextSibling

20190429:
	- prg output after parsing
		createNode(CmdTreeRootNode [indexNode=0, type=root])
		node(CmdTreeRootNode [indexNode=0, type=root])
			node(CmdTreeLevelStart [indexNode=1, type=levelStart])
			node(CmdTreeChoice [fixPart=q, fullText=query, indexNode=2, type=choiceText, level=2])
				node(CmdTreeLevelStart [indexNode=3, type=levelStart])
				node(CmdTreeChoice [fixPart=n, fullText=node, indexNode=4, type=choiceText, level=3])
					node(CmdTreeLevelStart [indexNode=5, type=levelStart])
					node(CmdTreeSeq [bCanBeEmpty=true, indexNode=6, listValues=[node1, node2], type=seqList])
					node(CmdTreeSeq [bCanBeEmpty=true, indexNode=7, subNodeName=domains, type=seqSub])
						node(CmdTreeLevelStart [indexNode=8, type=levelStart])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=9, fixPart=do, fullText=domain, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=10, fixPart==, fullText==, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=11, listSeparator=,, listValues=[domain1, domain2], type=seqListSep])
					node(CmdTreeSeq [bCanBeEmpty=true, indexNode=12, subNodeName=format, type=seqSub])
						node(CmdTreeLevelStart [indexNode=13, type=levelStart])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=14, fixPart=f, fullText=format, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=15, fixPart==, fullText==, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=16, subNodeName=formatlist, type=seqSub])
							node(CmdTreeLevelStart [indexNode=17, type=levelStart])
							node(CmdTreeChoice [fixPart=s, fullText=standard, indexNode=18, type=choiceText, level=6])
							node(CmdTreeChoice [fixPart=d, fullText=detailed, indexNode=19, type=choiceText, level=6])
					node(CmdTreeSeq [bCanBeEmpty=true, indexNode=20, subNodeName=auth, type=seqSub])
						node(CmdTreeLevelStart [indexNode=21, type=levelStart])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=22, fixPart=auth, fullText=authentication, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=23, fixPart==, fullText==, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=24, subNodeName=authlist, type=seqSub])
							node(CmdTreeLevelStart [indexNode=25, type=levelStart])
							node(CmdTreeChoice [fixPart=lo, fullText=local, indexNode=26, type=choiceText, level=6])
							node(CmdTreeChoice [fixPart=ld, fullText=ldap, indexNode=27, type=choiceText, level=6])
					node(CmdTreeSeq [bCanBeEmpty=true, indexNode=28, subNodeName=Type, type=seqSub])
						node(CmdTreeLevelStart [indexNode=29, type=levelStart])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=30, fixPart=t, fullText=type, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=31, fixPart==, fullText==, type=seqText])
						node(CmdTreeSeq [bCanBeEmpty=false, indexNode=32, subNodeName=TypeList, type=seqSub])
							node(CmdTreeLevelStart [indexNode=33, type=levelStart])
							node(CmdTreeChoice [fixPart=c, fullText=client, indexNode=34, type=choiceText, level=6])
							node(CmdTreeChoice [fixPart=nas, fullText=nas, indexNode=35, type=choiceText, level=6])
							node(CmdTreeChoice [fixPart=s, fullText=server, indexNode=36, type=choiceText, level=6])
							node(CmdTreeChoice [fixPart=a, fullText=any, indexNode=37, type=choiceText, level=6])
				node(CmdTreeChoice [fixPart=ac, fullText=actlog, indexNode=38, type=choiceText, level=3])
				node(CmdTreeChoice [fixPart=xx, fullText=xx123, indexNode=39, type=choiceText, level=3])
			node(CmdTreeChoice [fixPart=aud, fullText=audit, indexNode=40, type=choiceText, level=2])
				node(CmdTreeLevelStart [indexNode=41, type=levelStart])
				node(CmdTreeChoice [fixPart=cont, fullText=container, indexNode=42, type=choiceText, level=3])
					node(CmdTreeLevelStart [indexNode=43, type=levelStart])
					node(CmdTreeSeq [bCanBeEmpty=false, indexNode=44, subNodeName=firstsub, type=seqSub])
						node(CmdTreeLevelStart [indexNode=45, type=levelStart])
						node(CmdTreeChoiceList [listValues=[node1, node2], indexNode=46, type=choiceList, level=5, cmdSample=00 01 02 40 41 42 43 44 45 46])
						node(CmdTreeChoiceSub [subNodeName=firstsubsub1, indexNode=47, type=choiceSub, level=5, cmdSample=00 01 02 40 41 42 43 44 45 46 47])
							node(CmdTreeLevelStart [indexNode=48, type=levelStart])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=49, fixPart=stg, fullText=stgpool, type=seqText])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=50, fixPart==, fullText==, type=seqText])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=51, listValues=[pool1, pool2], type=seqList])
						node(CmdTreeChoiceSub [subNodeName=firstsubsub2, indexNode=52, type=choiceSub, level=5, cmdSample=00 01 02 40 41 42 43 44 45 46 47 52])
							node(CmdTreeLevelStart [indexNode=53, type=levelStart])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=54, fixPart=stg, fullText=stgpool, type=seqText])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=55, fixPart==, fullText==, type=seqText])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=56, listValues=[pool1, pool2], type=seqList])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=57, fixPart=stgpooldir, fullText=stgpooldirectory, type=seqText])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=58, fixPart==, fullText==, type=seqText])
							node(CmdTreeSeq [bCanBeEmpty=false, indexNode=59, listValues=[dir1, dir2], type=seqList])
			node(CmdTreeChoice [fixPart=d, fullText=dir, indexNode=60, type=choiceText, level=2])
	- elvileg kész a parser check :)

20190504:
	- Flex kérésére fixPart és fullText-ből 1 db attr lett, keyWord, amelyben 2 info van, az első nagybetűk azt jelzik, hogy mely karakterek után már keyWord egyezést feltételezünk
		- így átalakítom a prg-t
	- ez kész, de a tab kezelés nagyon bonyi...

20190505:
	- kitaláltam, hogy a tab-ra hogy legyen a következő szó
		- minden node-hoz tárolok egy cmdSample mezőt, ebben ' '-el elválasztva benne van, hogy milyen node-ok elérése után lehet ez a node, indexek vannak benne
			- itt számolom ki: recursiveSetCmdSample

20190509:
	- haladtam a tab-os dologgal

20190511:
	- azt találtam ki, hogy simán a lista sorrendje alapján próbálom betenni a tab listába a node-okat
		- így az előző node alapján tudom szűrni, hogy ok-e a node vagy nem...

20190512:
	- nem jó az előző, túl bonyi, inkább ez lesz:
		- végigmegyek az utsó matching node utáni node-tól a végéig
		- megnézem, hogyan tudok eljutni az aktuáis node-ból az utsó matching node-ig
		- ezt az utat vizsgálom meg, ez alapján döntök, hogy tab choice-e

20190516:
	- már majdnem jó az algó, csak ki kell találni, mikor van vége a listázásnak...
	- meg kell nézni az utsó node utáni első node-ot
		- az összes lehetséges következő szónak ez "alatt" kell lennie
			- azaz a gyökértől ideáig tartó útnak szerepelnie kell az összes megoldásban
	- KÉSZ!!! tesztelve az eddigi xml alapján!! :)
	- nincs kész...
	- átalakítottam a prg-t, hogy fájlba logoljon
	- készítettem egy TestCmd nevű prg-t
		- ezzel be lehet írni egy string-et, majd kiadja a lehetséges tab eseteket
		- ha azt írom be, hogy "quit", akkor kilép
	- hibás esetek eddig:
		- "query"
		- "q no no"
		- "q nod no"
		- "q node"

20190519:
	- Flex-el összehoztuk a távoli tsm elérést
		- google auth-al, pubkey-el
	- átalakítottam a cmfTree xmlt
		- új tag-ek lettek: choiceList,choiceSub
		- az eddigi choice átnevezve choiceText-nek
	- prg kódban még nincs átalakítás

20190521:
	- a legfontosabb algó a tab-nál levő lehetséges következő szavak listája
		- az algó
			- felteszem, hogy megvan az utolsó teljesen egyező szó (ctNodeLastMatching)
			- ezután mélységi bejárással egészen addig megyek, amíg megtalálom az utolsó teljesen egyező szó node-ját (ctNodeLastMatching)
			- a mélységi bejárás szerint a következő node nagyon fontos (ctNodeBase)
				- ez a node jelöli ki azt a fa részt, amelyben egyáltalán lehetnek a lehetséges következő "szót tartalmazó" node-ok
				- ugyanis, ha ezen a fa részen kívül megyünk, akkor már olyan node-okat találunk, amelyekhez az adott parancsot vizsgálva nem juthatnánk el
			- innentől a ctNodeBase node-ból kiinduló fát járom be mélységi bejárással (ctNodeBase az első ellenőrizendő node)
				- ha találok egy lehetséges következő szót tartalmazó node-ot
					- beteszem az eredmény listába
					- ha choiceNecessary vagy seqCanBeEmpty a node, akkor 
						- ha létezik child node-ja, akkor a bejáráskor kihagyom a child node-ból induló teljes fát
							- azaz ennek a sibling-jére ugrok a bejáráskor
							- ha nincs ilyen, akkor a parent sibling-jére ugrok a bejáráskor...
							- egészen addig amíg találok egy nem null node-ot és még benne vagyok a ctNodeBase node-ból induló fában
							- ha ilyen nincs, akkor kész az algó
					- ha seqNecessary a node, akkor 
						- a bejáráskor kihagyom az ebből a node-ból induló teljes fát
							- azaz ennek a node-nak a parent-jének a sibling-jére ugrok a bejáráskor...
							- egészen addig amíg találok egy nem null node-ot és még benne vagyok a ctNodeBase node-ból induló fában
							- ha ilyen nincs, akkor kész az algó
		- a mélységi bejárás sorrendjét tárolom egy linkedlist-ben, így nem kell rekurziót alkalmazni ilyenkor
			- egy adott node-tól a mélységi bejárás: a linkedlist-ben megkeresem a node-ot, majd onnan megyek egyesével
				- tároltam a node-okhoz a bejárási string-et, azaz a gyökértől az adott node-ig tartó legrövidebb út node-jainak indexeit
				- így két node-ról ezen string alapján el tudom dönteni hamar (startsWith), hogy egy rész-fában vannak-e
		- kialakítottam minden CmdTreeNode-nál egy WORD_TYPE paramétert, amelyben tárolom, hogy egy node-hoz milyen szó típusú szó-tartalmazás lehet
			- noWord: ekkor nem tartozik szó a node-hoz
			- choiceNecessary: ekkor tartozik szó a node-hoz, és úgy tartozik, hogy ha ezt nem választom, akkor folytathatom a bejárást a sibling node-okkal
			- seqCanBeEmpty: ekkor tartozik szó a node-hoz, és úgy tartozik, hogy ha ezt nem választom, akkor folytathatom a bejárást a sibling node-okkal
			- seqNecessary: ekkor tartozik szó a node-hoz, és úgy tartozik, hogy ezután a bejárást a parent sibling node-al kell folytatni
	- kész megint az algó :)
	- hibák:
		- "q no no"
		- "q nod no"

20190609:
	- automatikus teszteléshez külön prg-t fogok csinálni
		- ki kell találni egy olyan formátumot, hogy a teszelő prg a beviteli érték alapján egyértelműen ellenőrizni tudja a TAB-os keresés funkció működését
	- Flex: teszt esetek
		- q n[TAB]
			node-ra kiegészíti + SPACE
		- q no[TAB]
			node-ra kiegészíti + SPACE
		- q n [TAB] vagy q node [TAB]
			*, testnode1, testnode2, tsmnode, donode
			DOmain=aktuálsi TSM-es doamin lista
			Format=Detailed/Standard
			AUTHentication=LOcal/LDap
			Type=Client/NAS/Server/Any
		- q node *[TAB]
			semmi, de kezelni kell
		- q node *akármi[TAB]
			semmi, de kezelni kell
		- q node * [TAB]
			DOmain=aktuálsi TSM-es doamin lista
			Format=Detailed/Standard
			AUTHentication=LOcal/LDap
			Type=Client/NAS/Server/Any
		- q node * DO[TAB]
			DOman=-re kiegészít
		- q node testnode[TAB]
			testnode1, testnode2
		- q node tsmno[TAB]
			tsmnode-ra kiegészít egyből, mert csak egy ilyen node van
		- q node do
			itt mivel van olyan node, hogy donode és van olyan paraméter, hogy DOmain ezért:
			donode
			DOmain=aktuálsi TSM-es doamin lista domain1, tsmdomain
		- q node doma
			DOmain=-re egészíti ki
		- q node DOmain=[TAB]
			aktuális dominlista domain1, tsmdomain
		- q node DOmain=tsm[TAB]
			tsmdomain-re egészíti ki
		- q node DOmain=tsmdomain,dom[TAB]
			domain1-re egészíti ki, mert van ilyen TSM-es domain
	- átalakítás a jobb érthetőség miatt
		- most két részből áll a keresés
			- kezdetben egy rekurzív keresés, amíg egy olyan pontig érek el, amit már nem tudok a szabályok alapján azonosítani, vagy véget ér az input string
			- majd egy adott pozíciótól megnézem, a TAB lehetőségeket
		- ehelyett 1 keresést szeretnék, mert így is bonyi mindkettő, a rengeteg speciális eset kezelés miatt elég lesz 1 helyen módosítani
			- a terv az, hogy készítek 
				- egy fgvt (fgv1), amely csak megadja mik lehetnek a cmdtree szerint a következő szavak
				- egy fgvt (fgv2), amely egyezést néz a beviteli string következő szava alapján
				- ezt a két fgv-t hívva és az fgv2 kimenetét vizsgálva végighaladunk a teljes beviteli string-en és végül kiírjuk az eredményt :)
			- fgv1:
				- bemenő paramétere egy tree node (vagy az indexe)
					- ez az a node, ameddig full, vagy partial egyezés van a beviteli string-ben
					- kezdetben ez a root node
				- kimenő paramétere
					- egy cmdtree node lista, amely a következő szót tartalmazhazja
			- fgv2:
				- bemenő paramétere 
					- egy string, a következő "szó" a beviteli string-ben
						- ez elvileg tartalmazhat SPACE-t (pl valami felsorolás, vagy spec paraméter), de ekkor tudni kell, hogy összetartozó karakter sorozatról van szó (pl idézőjelek közti szó)
					- egy cmdtree lista, amely a következő szót tartalmazhazja
				- kimenő paramétere
					- egy cmdtree node lista, amelyben olyan node-ok vannak, amelynek megfelel a következő szó

20190610:
	- találtam bug-ot a prg-ben:
		- "query node format=Standard" cmd után nem hozta fel a lehetséges szavak közt az "AUTHentication" node-ot
		- módosítani kell a keresés...
		- végtelenül bonyi... elakadtam megint
	- ezt szeretném megcsinálni: "fgvt (fgv1), amely csak megadja mik lehetnek a cmdtree szerint a következő szavak"
		- adott az utolsó partial vagy full match node (nodeLastMatch)
			- ehhez a node-hoz child node-on utána sibling node-on ellenőrizve megkeresem a lehetséges első szavakat
			- ezután visszafele végigmegyek azokon a node-okon, ahogy a mélységi bejárás során a nodeLastMatch-ig eljutottunk
				- ahol van sibling és tovább tudok menni, ott még kibővítem a lehetséges node-ok listáját
					- pl ha egy choiceText-hez érek, akkor itt nem tudok tovább menni
					- ha egy seqSub-hoz érek, amely canBeEmpty=true, akkor itt tovább tudok menni és a sibling-eket is be tudom járni, amíg canBeEmpty=true
			- ha ez a root node, akkor nincs visszafele vizsgálat
	- rész eredmény: kész van addig, hogy a nodeLastMatch node alatti elemeket már beveszi a listába, már csak a nodeLastMatch ősökön kell visszafele végigmenni ügyesen

20190611:
	- kész van és helyes a jelenlegi teljes tree minden node-jára a possible-next-words lista
		- fájl mentve: app.log-saved1
	- ezután már csak az egyes node-ok egyezéseit kell kigyúrni, és Flex példáit

20190616:
	- próbáltam a TSM parancsok TXT-ből való feldolgozásának lehetőségeit
		- poppler pdf2txt
		- tsm query node weboldal-ról 
			- copy-paste Notepad++-ba, ez megtartja a struktúrát
			- kimásolva html-ként is ok lehet: spadmin.js\maven-projects\docs\1.html
		- mail többieknek
	- próbáltam befejezni a tab listát, még nem ok

20190704:
	- flex vps-én tesztek:
		- kiszedtem a help táblázatot
			- dsmadmc -id=fuge -password=ASDpoi123 help > a2
		- kiszedtem a help-ből egy adott cmd help TXT-jét (3.68.19 UPDATE NODE (Update node attributes))
			- dsmadmc -id=fuge -password=ASDpoi123 help 3.68.19 > a1
		- kiszedtem a help táblázatból a létező cmd-ket:
			- kitöröltem a 3. szekción kívüli elemeket
			- kitöröltem a cmd-k mögötti (... elemeket
				- notepad++ regexp: " \(.+" -> ""
			- kitöröltem azokat a sorokat, ami nem "3"-al kezdődik
				- notepad++ regexp: "^\s+[^3]+$" -> ""
			- kitöröltem a dupla space-eket
			- kivétel:
				- "3.16.12 DEFINE DEVCLASS - z/OS media server"
				- "3.68.11 UPDATE DEVCLASS - z/OS media server"
			- üres sorok törlése
				- notepad++ csere "\n\n" -> "\n"
			- így kész lett az allcmd lista
		- allcmd txt-ből készítek script-et, amely kiszedi az összes TXT-t
			- allcmd-ben csere "(^[^\s]+)\s.+$" > "dsmadmc -id=fuge -password=ASDpoi123 help \1 > help\1"
				- így kész a script
			- elindítottam, szépen készíti a help txt-ket :)

20190707:
	- kész a help TXT-k 1 soros cmd-be tevése, nagyon szép lett :)
		- spadmin.js\maven-projects\docs\all-cmds-txt-tree.zip

20190908:
	- create XML file
		- https://www.mkyong.com/java/how-to-create-xml-file-in-java-dom/
	- update xml file
		- https://stackoverflow.com/questions/6124239/how-to-update-xml-using-xpath-and-java
	- java merge xml-s
		- https://stackoverflow.com/questions/14568995/merging-xml-file-using-java-nodelist
	- belehaltam a + jel kezelésébe
		- rengeteg lehetőség van

20200311:
	- azt találtam ki, hogy egy köztes állapotba konvertálom a txt-ben leírt command-okat
		- ez egy irányított gráf, amelyet valahogy (először akár ObjectOutputStream-el is) kiírok egy fájlba
			- a lényeg, hogy az irányított gráf le legyen kódolva
		- aztán majd továbbkódolom, ha kell
			- lehet, hogy ebből a gráfból jobb is lesz a parser...
	- a gráf irányított, azaz egyértelműen balról jobbra halad, néha visszacsatolható...
	- a csomópontokból 1 vagy több másik csomópontba mehet az él
	- egy él lehet
		- üres, azaz úgy jutok a következő csomóponthoz, hogy nincs semmilyen karakter közben
		- fix paraméter név, minimum 1 nagybetűvel kezdődik
		- valamilyen érték, ez lehet 
			- egy listaelem
			- fix érték
			- wildcard karakter

20200314:
	- nem jó a gráfos megközelítés...
	- új ötlet:
		- egyszerű token parse-olás lesz, utána fogok további szemantikai vizsgálatotak, egyszerűsítéseket bevezetni
		- a cmdtree txt-ben minden entitást külön felveszek, és egy ezeket egymás után fűzöm láncolt listába
		- nincs semmilyen szemantikai ellenőrzés egyenlőre, csak felveszem a token-eket
		- a token-ek:
			- ">>" : cmd start
			- "><" : cmd end
			- ">|>": line separator
			- "+" : elágazás (több jelentése lehet)
			- "'" : elágazásból új ág kezdete vagy vége csak "+" vagy "|" jel alatt lehet
			- "|" : elágazás kötőjel, csak "+" jel alatt lehet
			- egy vagy több "-": kötöjel
			- nem "-": "-" után levő nem kötőjel vagy előbb felsorolt karakterek, a következő '-'-ig tart", pl ezek lehetnek
				- "nem kötőjel nagybetűvel kezdődik (tsm utasítás), a következő '-'-ig tart" : tsm utasítás (vagy több, space-el elválasztva)
				- "nem kötőjel kisbetűvel kezdődik (valamilyen tsm utasítás paramétere), a következő '-'-ig tart" : tsm utasítás (vagy több, space-el elválasztva)
	- kiderült, hogy nem megfelelő az all-cmds-txt-tree.txt fájl generálás
		- sajnos vannak olyan parancsok, amelyek subCmdTree-t tartalmaznak, amelyek nincsenek is benne az all-cmds-txt-tree.txt fájlban
		- DEFine RETRule
		- PERForm LIBACTion
		- UPDate RETRule
	- DE ha kitörlöm ezeket a cmd-ket az all-cmds-txt-tree.txt fájlból, akkor a jelenlegi prg (test.parsetxtcmdtree2.ParseTxtCmdTree2)
		- még csak a fő szálat vizsgálja...
	- elkészítettem egy másik zip fájlt is, amely a működő verziót tartalmazza:
		- all-cmds-txt-tree-no-subtree1.zip 
	- az eredeti hibás txt ebben van:
		- all-cmds-txt-tree-missing-subtrees.zip
	- elkezdtem a subTree-ket kezelni, de elég macerás
		- most befejezem, de van egy bug, amit meg kell oldani
		- először a subtree-ket kell lekezelni, mert a mainline-ban ha a 2. '+' karakterhez érek, akkor tudni kell, hogy ez egy "visszatérés" elágazásból
		- ezt csak akkor fogom tudni, ha a subtree-t már lekezeltem
		- ez azt is jelenti, hogy keresnem kell tudni TreePos alapján, ha már megvan, akkor még egyszer nem kezelem le...
																			 |   .-MAXPRocess--=--8----------.                             
			>>-CONvert STGpool--source_stgpool--target_stgpool-------------->|>--+---------------------------+--+----------------------+-----><
																			 |   '-MAXPRocess--=----number---'  '-DUration--=--minutes-'   



x